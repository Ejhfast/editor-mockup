// Generated by CoffeeScript 1.7.1
(function() {
  var Editor, Hinter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Editor = (function(_super) {
    __extends(Editor, _super);

    function Editor() {
      return Editor.__super__.constructor.apply(this, arguments);
    }

    Editor.content = function(params) {
      return this.div({
        "class": "document"
      }, (function(_this) {
        return function() {
          _this.textarea({
            "class": "editor",
            keydown: 'update',
            outlet: "text"
          });
          return _this.subview('hinter', new Hinter);
        };
      })(this));
    };

    Editor.prototype.initialize = function(params) {
      return this.text = params.text;
    };

    Editor.prototype.update = function(args) {
      if (args.keyCode === 190) {
        return this.hinter.shuffle();
      }
    };

    return Editor;

  })(View);

  Hinter = (function(_super) {
    __extends(Hinter, _super);

    function Hinter() {
      return Hinter.__super__.constructor.apply(this, arguments);
    }

    Hinter.content = function(params) {
      return this.div({
        "class": 'hinter'
      }, (function(_this) {
        return function() {
          return _this.ol({
            outlet: "hints"
          });
        };
      })(this));
    };

    Hinter.prototype.initialize = function(params) {
      return this.shuffle();
    };

    Hinter.prototype.shuffle = function() {
      var el, possible, _i, _len, _ref, _results;
      possible = ["run", "walk", "hike", "eat", "drink", "laugh", "door", "color", "hill", "sky", "field", "land", "basement", "what's up?", "how's it going?", "red", "blue", "deserted", "empty", "wind-swept", "tree"];
      this.hints.html("<b>Hints:</b>");
      _ref = _.sample(possible, 10);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(this.hints.append("<li>" + el + "</li>"));
      }
      return _results;
    };

    return Hinter;

  })(View);

  $('document').ready(function() {
    return $('body').append(new Editor({
      text: "Hello World!"
    }));
  });

}).call(this);
